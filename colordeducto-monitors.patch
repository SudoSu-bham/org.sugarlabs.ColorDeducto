diff --git a/ColorDeductoActivity.py b/ColorDeductoActivity.py
index dc0c7e5..4c51df9 100644
--- a/ColorDeductoActivity.py
+++ b/ColorDeductoActivity.py
@@ -31,6 +31,7 @@ from dbus.gi_service import ExportedGObject
 from sugar3.presence import presenceservice
 from sugar3.presence.tubeconn import TubeConnection
 
+from sugarapp.helpers import PrimaryMonitor
 from sugarapp.widgets import SugarCompatibleActivity
 from sugarapp.widgets import DesktopOpenChooser
 
@@ -76,8 +77,8 @@ class ColorDeductoActivity(SugarCompatibleActivity):
 
         # Create a canvas
         canvas = Gtk.DrawingArea()
-        canvas.set_size_request(Gdk.Screen.width(), \
-                                Gdk.Screen.height())
+        canvas.set_size_request(PrimaryMonitor.width(), \
+                                PrimaryMonitor.height())
         self.set_canvas(canvas)
         canvas.show()
         self.show_all()
diff --git a/game.py b/game.py
index 63d3fc7..ea2e05f 100644
--- a/game.py
+++ b/game.py
@@ -198,6 +198,7 @@ LEVELS_FALSE = ['def generate_pattern(self):\n\
                 0, 10, 5, 5, 3, 3))\n\
     return dot_list\n']
 
+from sugarapp.helpers import PrimaryMonitor
 
 from gi.repository import Gdk, GdkPixbuf, GObject, Gtk
 import cairo
@@ -224,8 +225,8 @@ from sprites import Sprites, Sprite
 # Grid dimensions
 GRID = 5
 WHITE = 2
-landscape = (Gdk.Screen.height() < Gdk.Screen.width())
-smallest_size = Gdk.Screen.height() if landscape else Gdk.Screen.width()
+landscape = (PrimaryMonitor.height() < PrimaryMonitor.width())
+smallest_size = PrimaryMonitor.height() if landscape else PrimaryMonitor.width()
 DOT_SIZE = int(0.1*smallest_size)
 
 
@@ -245,8 +246,8 @@ class Game():
 
         self._canvas.connect("draw", self.__draw_cb)
 
-        self._width = Gdk.Screen.width()
-        self._height = Gdk.Screen.height() - (GRID_CELL_SIZE * 1.5)
+        self._width = PrimaryMonitor.width()
+        self._height = PrimaryMonitor.height() - (GRID_CELL_SIZE * 1.5)
         self._scale = smallest_size / (DOT_SIZE*8)
         self._dot_size = int(DOT_SIZE * self._scale)
         self._space = int(self._dot_size / 5.)
